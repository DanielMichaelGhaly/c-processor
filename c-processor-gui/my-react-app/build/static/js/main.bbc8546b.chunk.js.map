{"version":3,"sources":["App.js","index.js"],"names":["App","instruction","setInstruction","useState","isLoading","setIsLoading","lastExecutionResult","setLastExecutionResult","registers","setRegisters","regs","i","concat","memory","setMemory","mem","React","createElement","className","htmlFor","id","value","rows","onChange","e","target","disabled","placeholder","onClick","async","trim","window","electronAPI","console","log","result","createFileAndRunExe","success","message","filePath","exePath","workingDir","exitCode","stdout","stderr","registersData","Object","keys","length","prevRegs","newRegs","_objectSpread","forEach","reg","entries","_ref","memoryData","prevMem","newMem","addr","parseInt","_ref2","alertMessage","alert","error","errorMessage","blob","Blob","type","url","URL","createObjectURL","link","document","href","download","body","appendChild","click","removeChild","revokeObjectURL","renderRegistersTable","registerEntries","map","_ref3","key","renderMemoryTable","memoryEntries","_ref4","address","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.bbc8546b.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nfunction App() {\r\n  const [instruction, setInstruction] = useState(\"\");\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [lastExecutionResult, setLastExecutionResult] = useState(null);\r\n\r\n  // Initialize registers (R0-R31 + PC)\r\n  const [registers, setRegisters] = useState(() => {\r\n    const regs = {};\r\n    for (let i = 0; i <= 31; i++) {\r\n      regs[`R${i}`] = 0;\r\n    }\r\n    regs[\"PC\"] = 0;\r\n    return regs;\r\n  });\r\n\r\n  // Initialize memory (1-2048)\r\n  const [memory, setMemory] = useState(() => {\r\n    const mem = {};\r\n    for (let i = 1; i <= 2048; i++) {\r\n      mem[i] = 0;\r\n    }\r\n    return mem;\r\n  });\r\n\r\n  const handleInstructionChange = (e) => {\r\n    setInstruction(e.target.value);\r\n  };\r\n\r\n  const handleStart = async () => {\r\n    if (!instruction.trim()) {\r\n      alert(\"Please enter some instructions before starting.\");\r\n      return;\r\n    }\r\n\r\n    setIsLoading(true);\r\n\r\n    try {\r\n      // Check if we're running in Electron\r\n      if (window.electronAPI) {\r\n        console.log(\"Running in Electron environment\");\r\n        console.log(\"Sending instruction:\", instruction);\r\n\r\n        // Electron environment - can create files and run executables\r\n        const result = await window.electronAPI.createFileAndRunExe(\r\n          instruction\r\n        );\r\n\r\n        console.log(\"Execution result:\", result);\r\n        setLastExecutionResult(result);\r\n\r\n        if (result.success) {\r\n          console.log(\"Success:\", result.message);\r\n          console.log(\"File created at:\", result.filePath);\r\n          console.log(\"Executable path:\", result.exePath);\r\n          console.log(\"Working directory:\", result.workingDir);\r\n          console.log(\"Exit code:\", result.exitCode);\r\n\r\n          if (result.stdout) {\r\n            console.log(\"Program output:\", result.stdout);\r\n          }\r\n          if (result.stderr) {\r\n            console.log(\"Program errors:\", result.stderr);\r\n          }\r\n\r\n          // Update registers and memory from log files\r\n          if (\r\n            result.registersData &&\r\n            Object.keys(result.registersData).length > 0\r\n          ) {\r\n            console.log(\"Updating registers with data:\", result.registersData);\r\n            setRegisters((prevRegs) => {\r\n              const newRegs = { ...prevRegs };\r\n              // Reset all registers to 0 first\r\n              Object.keys(newRegs).forEach((reg) => {\r\n                newRegs[reg] = 0;\r\n              });\r\n              // Update with data from registers_log.txt\r\n              Object.entries(result.registersData).forEach(([reg, value]) => {\r\n                newRegs[reg] = value;\r\n              });\r\n              return newRegs;\r\n            });\r\n            console.log(\"Registers updated from log file\");\r\n          } else {\r\n            console.log(\"No register data received\");\r\n          }\r\n\r\n          if (result.memoryData && Object.keys(result.memoryData).length > 0) {\r\n            console.log(\"Updating memory with data:\", result.memoryData);\r\n            setMemory((prevMem) => {\r\n              const newMem = { ...prevMem };\r\n              // Reset all memory to 0 first\r\n              Object.keys(newMem).forEach((addr) => {\r\n                newMem[parseInt(addr)] = 0;\r\n              });\r\n              // Update with data from memory_log.txt\r\n              Object.entries(result.memoryData).forEach(([addr, value]) => {\r\n                newMem[parseInt(addr)] = value;\r\n              });\r\n              return newMem;\r\n            });\r\n            console.log(\"Memory updated from log file\");\r\n          } else {\r\n            console.log(\"No memory data received\");\r\n          }\r\n\r\n          let alertMessage = `Success! File created and main.exe executed.\\n`;\r\n          alertMessage += `File: ${result.filePath}\\n`;\r\n          alertMessage += `Executable: ${result.exePath}\\n`;\r\n          alertMessage += `Exit Code: ${result.exitCode}\\n`;\r\n          alertMessage += `Output: ${result.stdout || \"No output\"}\\n`;\r\n\r\n          if (result.stderr) {\r\n            alertMessage += `Errors: ${result.stderr}\\n`;\r\n          }\r\n\r\n          alertMessage += `Registers updated: ${\r\n            Object.keys(result.registersData || {}).length\r\n          }\\n`;\r\n          alertMessage += `Memory updated: ${\r\n            Object.keys(result.memoryData || {}).length\r\n          }`;\r\n\r\n          alert(alertMessage);\r\n        } else {\r\n          console.error(\"Execution failed:\", result);\r\n          let errorMessage = `Execution failed!\\n`;\r\n          errorMessage += `Exit Code: ${result.exitCode}\\n`;\r\n          errorMessage += `Error: ${result.message}\\n`;\r\n\r\n          if (result.stderr) {\r\n            errorMessage += `Stderr: ${result.stderr}\\n`;\r\n          }\r\n          if (result.stdout) {\r\n            errorMessage += `Stdout: ${result.stdout}`;\r\n          }\r\n\r\n          alert(errorMessage);\r\n        }\r\n      } else {\r\n        console.log(\"Running in browser environment\");\r\n        // Browser environment - fallback to download\r\n        const fileContent = instruction || \"No instruction provided\";\r\n        const blob = new Blob([fileContent], { type: \"text/plain\" });\r\n        const url = URL.createObjectURL(blob);\r\n\r\n        const link = document.createElement(\"a\");\r\n        link.href = url;\r\n        link.download = \"test.txt\";\r\n        document.body.appendChild(link);\r\n        link.click();\r\n        document.body.removeChild(link);\r\n\r\n        URL.revokeObjectURL(url);\r\n\r\n        alert(\r\n          \"Running in browser mode. File downloaded as test.txt. Run as desktop app for full functionality.\"\r\n        );\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error:\", error);\r\n      alert(\"Error: \" + error.message);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const renderRegistersTable = () => {\r\n    const registerEntries = Object.entries(registers);\r\n\r\n    return (\r\n      <div className=\"w-1/2 pr-4\">\r\n        <h3 className=\"text-lg font-semibold mb-3 text-gray-800\">Registers</h3>\r\n        <div className=\"bg-white border border-gray-300 rounded-lg shadow-sm max-h-96 overflow-auto\">\r\n          <table className=\"w-full text-sm\">\r\n            <thead className=\"bg-gray-50 sticky top-0\">\r\n              <tr>\r\n                <th className=\"px-4 py-2 text-left font-medium text-gray-700 border-b\">\r\n                  Register\r\n                </th>\r\n                <th className=\"px-4 py-2 text-left font-medium text-gray-700 border-b\">\r\n                  Value\r\n                </th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {registerEntries.map(([reg, value]) => (\r\n                <tr key={reg} className=\"hover:bg-gray-50\">\r\n                  <td className=\"px-4 py-2 font-mono text-blue-600 border-b border-gray-100\">\r\n                    {reg}\r\n                  </td>\r\n                  <td className=\"px-4 py-2 font-mono border-b border-gray-100\">\r\n                    {value}\r\n                  </td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const renderMemoryTable = () => {\r\n    const memoryEntries = Object.entries(memory);\r\n\r\n    return (\r\n      <div className=\"w-1/2 pl-4\">\r\n        <h3 className=\"text-lg font-semibold mb-3 text-gray-800\">Memory</h3>\r\n        <div className=\"bg-white border border-gray-300 rounded-lg shadow-sm max-h-96 overflow-auto\">\r\n          <table className=\"w-full text-sm\">\r\n            <thead className=\"bg-gray-50 sticky top-0\">\r\n              <tr>\r\n                <th className=\"px-4 py-2 text-left font-medium text-gray-700 border-b\">\r\n                  Address\r\n                </th>\r\n                <th className=\"px-4 py-2 text-left font-medium text-gray-700 border-b\">\r\n                  Value\r\n                </th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {memoryEntries.map(([address, value]) => (\r\n                <tr key={address} className=\"hover:bg-gray-50\">\r\n                  <td className=\"px-4 py-2 font-mono text-green-600 border-b border-gray-100\">\r\n                    {address}\r\n                  </td>\r\n                  <td className=\"px-4 py-2 font-mono border-b border-gray-100\">\r\n                    {value}\r\n                  </td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gray-100 p-6\">\r\n      {/* Title */}\r\n      <div className=\"text-center mb-8\">\r\n        <h1 className=\"text-4xl font-bold text-gray-800 mb-2\">C-Processor</h1>\r\n        <div className=\"w-24 h-1 bg-blue-500 mx-auto\"></div>\r\n      </div>\r\n\r\n      {/* Instruction Input */}\r\n      <div className=\"max-w-4xl mx-auto mb-8\">\r\n        <div className=\"bg-white rounded-lg shadow-sm border border-gray-300 p-6\">\r\n          <label\r\n            htmlFor=\"instruction\"\r\n            className=\"block text-lg font-medium text-gray-700 mb-3\"\r\n          >\r\n            Enter Instructions:\r\n          </label>\r\n          <div className=\"flex gap-4\">\r\n            <textarea\r\n              id=\"instruction\"\r\n              value={instruction}\r\n              rows={8}\r\n              onChange={handleInstructionChange}\r\n              disabled={isLoading}\r\n              className=\"h-48 flex-1 px-4 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent font-mono text-lg disabled:bg-gray-100 disabled:cursor-not-allowed\"\r\n              placeholder=\"Enter instructions line by line...\"\r\n            />\r\n            <button\r\n              onClick={handleStart}\r\n              disabled={isLoading}\r\n              className=\"px-6 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 focus:ring-2 focus:ring-green-500 focus:ring-offset-2 font-medium disabled:bg-gray-400 disabled:cursor-not-allowed min-w-[80px]\"\r\n            >\r\n              {isLoading ? \"Running...\" : \"Start\"}\r\n            </button>\r\n          </div>\r\n\r\n          {/* Debug info */}\r\n          {lastExecutionResult && (\r\n            <div className=\"mt-4 p-3 bg-gray-50 rounded border text-sm\">\r\n              <div className=\"font-medium text-gray-700 mb-2\">\r\n                Last Execution:\r\n              </div>\r\n              <div className=\"text-gray-600\">\r\n                <div>\r\n                  Status: {lastExecutionResult.success ? \"Success\" : \"Failed\"}\r\n                </div>\r\n                <div>Exit Code: {lastExecutionResult.exitCode}</div>\r\n                <div>Executable: {lastExecutionResult.exePath}</div>\r\n                {lastExecutionResult.stdout && (\r\n                  <div>Output: {lastExecutionResult.stdout}</div>\r\n                )}\r\n                {lastExecutionResult.stderr && (\r\n                  <div className=\"text-red-600\">\r\n                    Errors: {lastExecutionResult.stderr}\r\n                  </div>\r\n                )}\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n\r\n      {/* Tables Container */}\r\n      <div className=\"max-w-6xl mx-auto\">\r\n        <div className=\"flex gap-0\">\r\n          {renderRegistersTable()}\r\n          {renderMemoryTable()}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}