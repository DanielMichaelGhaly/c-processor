{"version":3,"sources":["App.js","index.js"],"names":["App","instruction","setInstruction","useState","registers","setRegisters","regs","i","concat","memory","setMemory","mem","React","createElement","className","htmlFor","id","value","rows","onChange","e","target","placeholder","onClick","async","window","electronAPI","result","createFileAndRunExe","console","log","message","filePath","stdout","stderr","registersData","Object","keys","length","prevRegs","newRegs","_objectSpread","entries","forEach","_ref","reg","memoryData","prevMem","newMem","_ref2","addr","parseInt","alert","blob","Blob","type","url","URL","createObjectURL","link","document","href","download","body","appendChild","click","removeChild","revokeObjectURL","error","renderRegistersTable","registerEntries","map","_ref3","key","renderMemoryTable","memoryEntries","_ref4","address","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.46babcd2.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nfunction App() {\r\n  const [instruction, setInstruction] = useState(\"\");\r\n\r\n  // Initialize registers (R0-R31 + PC)\r\n  const [registers, setRegisters] = useState(() => {\r\n    const regs = {};\r\n    for (let i = 0; i <= 31; i++) {\r\n      regs[`R${i}`] = 0;\r\n    }\r\n    regs[\"PC\"] = 0;\r\n    return regs;\r\n  });\r\n\r\n  // Initialize memory (1-2048)\r\n  const [memory, setMemory] = useState(() => {\r\n    const mem = {};\r\n    for (let i = 1; i <= 2048; i++) {\r\n      mem[i] = 0;\r\n    }\r\n    return mem;\r\n  });\r\n\r\n  const handleInstructionChange = (e) => {\r\n    setInstruction(e.target.value);\r\n  };\r\n\r\n  const handleStart = async () => {\r\n    try {\r\n      // Check if we're running in Electron\r\n      if (window.electronAPI) {\r\n        // Electron environment - can create files and run executables\r\n        const result = await window.electronAPI.createFileAndRunExe(\r\n          instruction\r\n        );\r\n\r\n        console.log(\"Success:\", result.message);\r\n        console.log(\"File created at:\", result.filePath);\r\n        if (result.stdout) {\r\n          console.log(\"Program output:\", result.stdout);\r\n        }\r\n        if (result.stderr) {\r\n          console.log(\"Program errors:\", result.stderr);\r\n        }\r\n\r\n        // Update registers and memory from log files\r\n        if (\r\n          result.registersData &&\r\n          Object.keys(result.registersData).length > 0\r\n        ) {\r\n          setRegisters((prevRegs) => {\r\n            const newRegs = { ...prevRegs };\r\n            // Update with data from registers_log.txt\r\n            Object.entries(result.registersData).forEach(([reg, value]) => {\r\n              newRegs[reg] = value;\r\n            });\r\n            return newRegs;\r\n          });\r\n          console.log(\"Registers updated from log file\");\r\n        }\r\n\r\n        if (result.memoryData && Object.keys(result.memoryData).length > 0) {\r\n          setMemory((prevMem) => {\r\n            const newMem = { ...prevMem };\r\n            // Update with data from memory_log.txt\r\n            Object.entries(result.memoryData).forEach(([addr, value]) => {\r\n              newMem[parseInt(addr)] = value;\r\n            });\r\n            return newMem;\r\n          });\r\n          console.log(\"Memory updated from log file\");\r\n        }\r\n\r\n        alert(\r\n          `Success! File created and main.exe executed.\\nFile: ${\r\n            result.filePath\r\n          }\\nOutput: ${result.stdout || \"No output\"}\\nRegisters updated: ${\r\n            Object.keys(result.registersData || {}).length\r\n          }\\nMemory updated: ${Object.keys(result.memoryData || {}).length}`\r\n        );\r\n      } else {\r\n        // Browser environment - fallback to download\r\n        const fileContent = instruction || \"No instruction provided\";\r\n        const blob = new Blob([fileContent], { type: \"text/plain\" });\r\n        const url = URL.createObjectURL(blob);\r\n\r\n        const link = document.createElement(\"a\");\r\n        link.href = url;\r\n        link.download = \"test.txt\";\r\n        document.body.appendChild(link);\r\n        link.click();\r\n        document.body.removeChild(link);\r\n\r\n        URL.revokeObjectURL(url);\r\n\r\n        alert(\r\n          \"Running in browser mode. File downloaded as test.txt. Run as desktop app for full functionality.\"\r\n        );\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error:\", error);\r\n      alert(\"Error: \" + error.message);\r\n    }\r\n  };\r\n\r\n  const renderRegistersTable = () => {\r\n    const registerEntries = Object.entries(registers);\r\n\r\n    return (\r\n      <div className=\"w-1/2 pr-4\">\r\n        <h3 className=\"text-lg font-semibold mb-3 text-gray-800\">Registers</h3>\r\n        <div className=\"bg-white border border-gray-300 rounded-lg shadow-sm max-h-96 overflow-auto\">\r\n          <table className=\"w-full text-sm\">\r\n            <thead className=\"bg-gray-50 sticky top-0\">\r\n              <tr>\r\n                <th className=\"px-4 py-2 text-left font-medium text-gray-700 border-b\">\r\n                  Register\r\n                </th>\r\n                <th className=\"px-4 py-2 text-left font-medium text-gray-700 border-b\">\r\n                  Value\r\n                </th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {registerEntries.map(([reg, value]) => (\r\n                <tr key={reg} className=\"hover:bg-gray-50\">\r\n                  <td className=\"px-4 py-2 font-mono text-blue-600 border-b border-gray-100\">\r\n                    {reg}\r\n                  </td>\r\n                  <td className=\"px-4 py-2 font-mono border-b border-gray-100\">\r\n                    {value}\r\n                  </td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const renderMemoryTable = () => {\r\n    const memoryEntries = Object.entries(memory);\r\n\r\n    return (\r\n      <div className=\"w-1/2 pl-4\">\r\n        <h3 className=\"text-lg font-semibold mb-3 text-gray-800\">Memory</h3>\r\n        <div className=\"bg-white border border-gray-300 rounded-lg shadow-sm max-h-96 overflow-auto\">\r\n          <table className=\"w-full text-sm\">\r\n            <thead className=\"bg-gray-50 sticky top-0\">\r\n              <tr>\r\n                <th className=\"px-4 py-2 text-left font-medium text-gray-700 border-b\">\r\n                  Address\r\n                </th>\r\n                <th className=\"px-4 py-2 text-left font-medium text-gray-700 border-b\">\r\n                  Value\r\n                </th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {memoryEntries.map(([address, value]) => (\r\n                <tr key={address} className=\"hover:bg-gray-50\">\r\n                  <td className=\"px-4 py-2 font-mono text-green-600 border-b border-gray-100\">\r\n                    {address}\r\n                  </td>\r\n                  <td className=\"px-4 py-2 font-mono border-b border-gray-100\">\r\n                    {value}\r\n                  </td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gray-100 p-6\">\r\n      {/* Title */}\r\n      <div className=\"text-center mb-8\">\r\n        <h1 className=\"text-4xl font-bold text-gray-800 mb-2\">C-Processor</h1>\r\n        <div className=\"w-24 h-1 bg-blue-500 mx-auto\"></div>\r\n      </div>\r\n\r\n      {/* Instruction Input */}\r\n      <div className=\"max-w-4xl mx-auto mb-8\">\r\n        <div className=\"bg-white rounded-lg shadow-sm border border-gray-300 p-6\">\r\n          <label\r\n            htmlFor=\"instruction\"\r\n            className=\"block text-lg font-medium text-gray-700 mb-3\"\r\n          >\r\n            Enter Instructions:\r\n          </label>\r\n          <div className=\"flex gap-4\">\r\n            <textarea\r\n              id=\"instruction\"\r\n              value={instruction}\r\n              rows={1024}\r\n              onChange={handleInstructionChange}\r\n              className=\"h-48 flex-1 px-4 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent font-mono text-lg\"\r\n              placeholder=\"Enter instructions line by line...\"\r\n            />\r\n            <button\r\n              onClick={handleStart}\r\n              className=\"px-6 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 focus:ring-2 focus:ring-green-500 focus:ring-offset-2 font-medium\"\r\n            >\r\n              Start\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Tables Container */}\r\n      <div className=\"max-w-6xl mx-auto\">\r\n        <div className=\"flex gap-0\">\r\n          {renderRegistersTable()}\r\n          {renderMemoryTable()}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}